SELECT *
FROM employees;
-- *은 모든 열 모든 데이터를 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id, first_name, last_name
FROM employees;
-- select 뒤의 열들만 조회
-- 명령어는 대문자 나머지는 소문자로 작성 권장

SELECT employee_id, forst_name, last_name
FROM employees;
ORDER BY employee_id DESC;
-- select 뒤의 열들만 조회
-- employee_id를 기준으로 내림차순 DESC 정렬

SELECT DISTINCYT job_id
FROM employees;
--job_id를 기준으로 고유한 값들만
-- 즉, 중복 제거된 결과

SELECT employee_id AS 사원번호, first_name AS 이름, last_name AS 성
FROM employees;
-- AS를 사용하여 열이름을 변경하여 출력한다.

SELECT employee_id, first_name || last_name
FROM employees;
-- 두 개열을 붙여서 하나의 데이터 값으로 나타낸다.

SELECT employee_id,
        first_name || ' ' || last_name,
        email||'@'||'company.com'
FROM employees;

SELECT employee_id, AS 사원번호,
        salary AS 급여,
        salary + 500 AS 추가급여,
        salary - 100 AS 인하급여,
        (salary * 1.1) / 2 AS 조정급여,

FROM employees;

-- 열이름을 별명으로 잠시 보여줄때만 사용된다.

SELECT *
FROM employees
WHERE employee_id = 100;

-- 아이디가 100인 사람의 정보만 출력

SELECT *
FROM employees
WHERE first_name = 'David';

-- first_name에서 David만 출력

SELECT *
FROM employees
WHERE job_id LIKE 'AD%';

-- LIKE는 명확하지 않은 조건으로 찾을때
-- ~처럼 ~같은
-- 조건에는 문자나 숫자를 포함할 수 있다.
-- % 모든 문자 _한글자 라는 의미이다.

SELECT *
FROM employees
WHERE job_id IS NULL;

-- 데이터 값이 null 인 경우를 조회
-- 0이냐 공백이 아닌 아무것도 없는 값이 null

SELECT *
FROM employees
WHERE job_id IS NOT NULL;

-- IS NULL <> IS NOT NULL

SELECT last_name,
        LOWER(last_name) LOWER적용,
        UPPER(last_name) UPPER적용,
        emil,
        INITCAP(email) INITCAP적용,

SELECT first_name,
        LPAD(first_name, 12, ' ') 적용결과
FROM emplotyees;

-- employee 테이블에서 first_name 값에서 12자리로 만들고 나머지를
-- 어떤 문자로 채운다. (* 또는 ' ')

SELECT job_id,
        LTRIM(job_id, 'F') LTRIM적용결과,
        RTRIM(job_id, 'T') RTRIM적용결과
        
FROM employees;
-- 글자를 만나면 삭제...

SELECT TRIM('    Big Data    ')
FROM dual;
-- 앞 뒤 여백 강제 제거
